{
    "ev3.beepNote": {
        "message": "анота [NOTE] ихәмартәуп [TIME] сек",
        "description": "play some note on EV3 for some time"
    },
    "ev3.buttonPressed": {
        "message": "аклавиша [PORT] иақәыӷәӷәоума?",
        "description": "is a button on some port pressed?"
    },
    "ev3.getBrightness": {
        "message": "ажжара",
        "description": "gets measured brightness"
    },
    "ev3.getDistance": {
        "message": "ирыбжьоу",
        "description": "gets measured distance"
    },
    "ev3.getMotorPosition": {
        "message": "аматор [PORT] апозициа",
        "description": "get the measured degrees a motor has turned"
    },
    "ev3.motorSetPower": {
        "message": "аматор [PORT] амчра [POWER] %",
        "description": "set a motor's power to some value"
    },
    "ev3.motorTurnClockwise": {
        "message": "аматор [PORT] ыргьежьтәуп [TIME] сек",
        "description": "turn a motor clockwise for some time"
    },
    "ev3.motorTurnCounterClockwise": {
        "message": "аматор [PORT] шәыргьежь абрахь [TIME] сек",
        "description": "turn a motor counter-clockwise for some time"
    },
    "ev3.whenBrightnessLessThan": {
        "message": "ажжара < [DISTANCE] акәзар",
        "description": "when value measured by brightness sensor is less than some value"
    },
    "ev3.whenButtonPressed": {
        "message": "аклавиша [PORT] ианақәыӷәӷәоу",
        "description": "when a button connected to a port is pressed"
    },
    "ev3.whenDistanceLessThan": {
        "message": "ирыбжьоу < [DISTANCE] акәзар",
        "description": "when the value measured by the distance sensor is less than some value"
    },
    "microbit.buttonsMenu.any": {
        "message": "иарбанзаалакь аҟынтәи",
        "description": "label for \"any\" element in button picker for micro:bit extension"
    },
    "microbit.clearDisplay": {
        "message": "ирыцқьатәуп аекран",
        "description": "display nothing on the micro:bit display"
    },
    "microbit.defaultTextToDisplay": {
        "message": "Салам!",
        "description": "default text to display.\n                                IMPORTANT - the micro:bit only supports letters a-z, A-Z.\n                                Please substitute a default word in your language\n                                that can be written with those characters,\n                                substitute non-accented characters or leave it as \"Hello!\".\n                                Check the micro:bit site documentation for details"
    },
    "microbit.displaySymbol": {
        "message": "иаарԥштәуп [MATRIX]",
        "description": "display a pattern on the micro:bit display"
    },
    "microbit.displayText": {
        "message": "display text [TEXT]",
        "description": "display text on the micro:bit display"
    },
    "microbit.gesturesMenu.jumped": {
        "message": "иадԥатәуп",
        "description": "label for jumped gesture in gesture picker for micro:bit extension"
    },
    "microbit.gesturesMenu.moved": {
        "message": "инаскьагатәуп",
        "description": "label for moved gesture in gesture picker for micro:bit extension"
    },
    "microbit.gesturesMenu.shaken": {
        "message": "ирҵыстәуп",
        "description": "label for shaken gesture in gesture picker for micro:bit extension"
    },
    "microbit.isButtonPressed": {
        "message": "аклавиша [BTN] иақәыӷәӷәоума?",
        "description": "is the selected button on the micro:bit pressed?"
    },
    "microbit.isTilted": {
        "message": "ирнааума [DIRECTION]?",
        "description": "is the micro:bit is tilted in a direction?"
    },
    "microbit.pinStateMenu.off": {
        "message": "иаҿыхтәуп",
        "description": "label for off element in pin state picker for micro:bit extension"
    },
    "microbit.pinStateMenu.on": {
        "message": "иаҿактәуп",
        "description": "label for on element in pin state picker for micro:bit extension"
    },
    "microbit.tiltAngle": {
        "message": "аргьежьра акәакь [DIRECTION]",
        "description": "how much the micro:bit is tilted in a direction"
    },
    "microbit.tiltDirectionMenu.any": {
        "message": "иарбанзаалакь аҟынтәи ",
        "description": "label for any direction element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.back": {
        "message": "шьҭахьҟа",
        "description": "label for back element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.front": {
        "message": "ԥхьаҟа",
        "description": "label for front element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.left": {
        "message": "армарахь",
        "description": "label for left element in tilt direction picker for micro:bit extension"
    },
    "microbit.tiltDirectionMenu.right": {
        "message": "арӷьарахь",
        "description": "label for right element in tilt direction picker for micro:bit extension"
    },
    "microbit.whenButtonPressed": {
        "message": "аклавиша [BTN] ҳанақәыӷәӷәалакь",
        "description": "when the selected button on the micro:bit is pressed"
    },
    "microbit.whenGesture": {
        "message": "[GESTURE] акәзар",
        "description": "when the selected gesture is detected by the micro:bit"
    },
    "microbit.whenPinConnected": {
        "message": "when pin [PIN] connected",
        "description": "when the pin detects a connection to Earth/Ground"
    },
    "microbit.whenTilted": {
        "message": "[DIRECTION] анырнаау",
        "description": "when the micro:bit is tilted in a direction"
    },
    "music.categoryName": {
        "message": "Амузыка",
        "description": "Label for the Music extension category"
    },
    "music.changeTempo": {
        "message": "иԥсахтәуп атемп [TEMPO] ала",
        "description": "change tempo (speed) for notes, drums, and rests played"
    },
    "music.drumBass": {
        "message": "(2) Абасстә даул",
        "description": "Sound of bass drum as used in a standard drum kit"
    },
    "music.drumBongo": {
        "message": "(13) Бонго",
        "description": "Sound of a bongo being struck"
    },
    "music.drumCabasa": {
        "message": "(15) Кабаса",
        "description": "Sound of a cabasa being shaken"
    },
    "music.drumClaves": {
        "message": "(9) Аклавесин",
        "description": "Sound of claves being struck together"
    },
    "music.drumClosedHiHat": {
        "message": "(6) Иарку хаи-хет",
        "description": "Sound of a drum stick hitting a hi-hat while closed"
    },
    "music.drumConga": {
        "message": "(14) Аконга",
        "description": "Sound of a conga being struck"
    },
    "music.drumCowbell": {
        "message": "(11) Аҵәҵәабжьы",
        "description": "Sound of a cowbell being struck"
    },
    "music.drumCrashCymbal": {
        "message": "(4) Асаанқәа рысра",
        "description": "Sound of a drum stick hitting a crash cymbal"
    },
    "music.drumCuica": {
        "message": "(18) Акуика",
        "description": "Sound of a cuica being played"
    },
    "music.drumGuiro": {
        "message": "(16) Гуиро",
        "description": "Sound of a guiro being played"
    },
    "music.drumHandClap": {
        "message": "(8) Анапеинҟьабжь",
        "description": "Sound of two hands clapping together"
    },
    "music.drumOpenHiHat": {
        "message": "(5) Иаарту хаи-хет",
        "description": "Sound of a drum stick hitting a hi-hat while open"
    },
    "music.drumSideStick": {
        "message": "(3) Аганахьтәи амаа",
        "description": "Sound of a drum stick hitting the side of a drum (usually the snare)"
    },
    "music.drumSnare": {
        "message": "(1) Адаул хәыҷы",
        "description": "Sound of snare drum as used in a standard drum kit"
    },
    "music.drumTambourine": {
        "message": "(7) Атамбурин",
        "description": "Sound of a tambourine being struck"
    },
    "music.drumTriangle": {
        "message": "(12) Ахкәакь",
        "description": "Sound of a triangle (instrument) being struck"
    },
    "music.drumVibraslap": {
        "message": "(17) Авибрациа ҟазҵо аслеп",
        "description": "Sound of a Vibraslap being played"
    },
    "music.drumWoodBlock": {
        "message": "(10) Амҿтәы шәындыҟәра хәҷы",
        "description": "Sound of a wood block being struck"
    },
    "music.getTempo": {
        "message": "атемп",
        "description": "get the current tempo (speed) for notes, drums, and rests played"
    },
    "music.instrumentBass": {
        "message": "(6) Абасс",
        "description": "Sound of an accoustic upright bass"
    },
    "music.instrumentBassoon": {
        "message": "(14) Афагот",
        "description": "Sound of a bassoon being played"
    },
    "music.instrumentCello": {
        "message": "(8) Авиолончель",
        "description": "Sound of a cello being played with a bow"
    },
    "music.instrumentChoir": {
        "message": "(15) Ахор",
        "description": "Sound of a choir singing"
    },
    "music.instrumentClarinet": {
        "message": "(10) Акларнет",
        "description": "Sound of a clarinet being played"
    },
    "music.instrumentElectricGuitar": {
        "message": "(5) Аелектрогитара",
        "description": "Sound of an electric guitar"
    },
    "music.instrumentElectricPiano": {
        "message": "(2) Аелектро пианино",
        "description": "Sound of an electric piano"
    },
    "music.instrumentFlute": {
        "message": "(12) Афлеита",
        "description": "Sound of a flute being played"
    },
    "music.instrumentGuitar": {
        "message": "(4) Агитара",
        "description": "Sound of an accoustic guitar"
    },
    "music.instrumentMarimba": {
        "message": "(19) Маримба",
        "description": "Sound of a marimba being struck"
    },
    "music.instrumentMusicBox": {
        "message": "(17) Амузыкатә шкатулка",
        "description": "Sound of a music box playing"
    },
    "music.instrumentOrgan": {
        "message": "(3) Ауарӷан",
        "description": "Sound of an organ"
    },
    "music.instrumentPiano": {
        "message": "(1) Афортепиано",
        "description": "Sound of a piano"
    },
    "music.instrumentPizzicato": {
        "message": "(7) Апаццикато",
        "description": "Sound of a string instrument (e.g. violin) being plucked"
    },
    "music.instrumentSaxophone": {
        "message": "(11) Асаксафон",
        "description": "Sound of a saxophone being played"
    },
    "music.instrumentSteelDrum": {
        "message": "(18) Аџыртә даул",
        "description": "Sound of a steel drum being struck"
    },
    "music.instrumentSynthLead": {
        "message": "(20) Ихадоу асинтезатор",
        "description": "Sound of a \"lead\" synthesizer being played"
    },
    "music.instrumentSynthPad": {
        "message": "(21) Асинтезатор Pad",
        "description": "Sound of a \"pad\" synthesizer being played"
    },
    "music.instrumentTrombone": {
        "message": "(9) Атрамбон",
        "description": "Sound of a trombone being played"
    },
    "music.instrumentVibraphone": {
        "message": "(16) Авибрафон",
        "description": "Sound of a vibraphone being struck"
    },
    "music.instrumentWoodenFlute": {
        "message": "(13) Амҿтәы флеита",
        "description": "Sound of a wooden flute being played"
    },
    "music.midiSetInstrument": {
        "message": "иԥсахтәуп амаруга [INSTRUMENT] ала",
        "description": "set the instrument for notes played according to a mapping of MIDI codes"
    },
    "music.playDrumForBeats": {
        "message": "шәыхәмарла адаулқәа [DRUM] рҟны, иалкааны [BEATS] ахәҭақәа",
        "description": "play drum sample for a number of beats"
    },
    "music.playNoteForBeats": {
        "message": "анота [NOTE] ихәмартәуп [BEATS] тактк",
        "description": "play a note for a number of beats"
    },
    "music.restForBeats": {
        "message": "ааҭгылара аамҭала [BEATS] хәҭак",
        "description": "rest (play no sound) for a number of beats"
    },
    "music.setInstrument": {
        "message": "иԥсахтәуп амаруга [INSTRUMENT] ала",
        "description": "set the instrument (e.g. piano, guitar, trombone) for notes played"
    },
    "music.setTempo": {
        "message": "иԥсахтәуп атемп [TEMPO] ала",
        "description": "set tempo (speed) for notes, drums, and rests played"
    },
    "pen.categoryName": {
        "message": "Акалам",
        "description": "Label for the pen extension category"
    },
    "pen.changeColorParam": {
        "message": "иԥсахтәуп акалам [COLOR_PARAM][VALUE] ала",
        "description": "change the state of a pen color parameter"
    },
    "pen.changeHue": {
        "message": "иԥсахтәуп акалам аԥштәы [HUE] ала",
        "description": "legacy pen blocks - change pen color"
    },
    "pen.changeShade": {
        "message": "иԥсахтәуп акалам агага [SHADE] ала",
        "description": "legacy pen blocks - change pen shade"
    },
    "pen.changeSize": {
        "message": "иԥсахтәуп акалам ашәагаа[SIZE] ала",
        "description": "change the diameter of the trail left by a sprite"
    },
    "pen.clear": {
        "message": "ианыхтәуп зегьы",
        "description": "erase all pen trails and stamps"
    },
    "pen.colorMenu.brightness": {
        "message": "ажжара",
        "description": "label for brightness element in color picker for pen extension"
    },
    "pen.colorMenu.color": {
        "message": "аԥштәы",
        "description": "label for color element in color picker for pen extension"
    },
    "pen.colorMenu.saturation": {
        "message": "аԥштәылгазаара",
        "description": "label for saturation element in color picker for pen extension"
    },
    "pen.colorMenu.transparency": {
        "message": "аҵәцара",
        "description": "label for transparency element in color picker for pen extension"
    },
    "pen.penDown": {
        "message": "акалам лашьҭтәуп",
        "description": "start leaving a trail when the sprite moves"
    },
    "pen.penUp": {
        "message": "акалам иҩахатәуп",
        "description": "stop leaving a trail behind the sprite"
    },
    "pen.setColor": {
        "message": "иқәыргылатәуп акалам аԥштәы [COLOR]",
        "description": "set the pen color to a particular (RGB) value"
    },
    "pen.setColorParam": {
        "message": "иқәыргылатәуп акалам [COLOR_PARAM]=[VALUE]",
        "description": "set the state for a pen color parameter e.g. saturation"
    },
    "pen.setHue": {
        "message": "иқәыргылатәуп акалам аԥштәы [HUE]",
        "description": "legacy pen blocks - set pen color to number"
    },
    "pen.setShade": {
        "message": "иқәыргылатәуп акалам агага [SHADE]",
        "description": "legacy pen blocks - set pen shade"
    },
    "pen.setSize": {
        "message": "иқәыргылатәуп акалам ашәагаа [SIZE]",
        "description": "set the diameter of a trail left by a sprite"
    },
    "pen.stamp": {
        "message": "аштамп",
        "description": "render current costume on the background"
    },
    "speech.defaultWhenIHearValue": {
        "message": "ԥхьаҟа",
        "description": "The default phrase/word that, when heard, triggers the event."
    },
    "speech.extensionName": {
        "message": "Абжьы атеқст ахь аиагара",
        "description": "Name of extension that adds speech recognition blocks. Do Not translate Google."
    },
    "speech.listenAndWait": {
        "message": "Иӡырҩтәуп нас иԥштәуп",
        "description": "Start listening to the microphone and wait for a result from the speech recognition system."
    },
    "speech.speechReporter": {
        "message": "ацәажәара",
        "description": "Get the text of spoken words transcribed by the speech recognition system."
    },
    "speech.whenIHear": {
        "message": "Сара [PHRASE] ансаҳауа",
        "description": "Event that triggers when the text entered on the block is recognized by the speech recognition system."
    },
    "text2speech.defaultTextToSpeak": {
        "message": "салам",
        "description": "hello: the default text to speak"
    },
    "text2speech.giant": {
        "message": "агигант",
        "description": "Name for a funny voice with a low pitch."
    },
    "text2speech.kitten": {
        "message": "ацгәы",
        "description": "A baby cat."
    },
    "text2speech.max": {
        "message": "max",
        "description": "Name for a voice with ambiguous gender."
    },
    "text2speech.quinn": {
        "message": "куин",
        "description": "Name for a voice with ambiguous gender."
    },
    "text2speech.setLanguageBlock": {
        "message": "иқәыргылатәуп абызшәа [LANGUAGE]",
        "description": "Set the language for speech synthesis."
    },
    "text2speech.setVoiceBlock": {
        "message": "иқәыргылатәуп абжьы [VOICE]",
        "description": "Set the voice for speech synthesis."
    },
    "text2speech.speakAndWaitBlock": {
        "message": "иҳәатәуп [WORDS]",
        "description": "Speak some words."
    },
    "text2speech.squeak": {
        "message": "аҷыжьбжьы",
        "description": "Name for a funny voice with a high pitch."
    },
    "translate.categoryName": {
        "message": "Атанслиациа",
        "description": "Name of extension that adds translate blocks"
    },
    "translate.defaultTextToTranslate": {
        "message": "салам",
        "description": "hello: the default text to translate"
    },
    "translate.translateBlock": {
        "message": "еиҭагатәуп [WORDS] [LANGUAGE] ахь",
        "description": "translate some text to a different language"
    },
    "translate.viewerLanguage": {
        "message": "абызшәа",
        "description": "the languge of the project viewer"
    },
    "videoSensing.categoryName": {
        "message": "Авидео ахархәара",
        "description": "Label for the video sensing extension category"
    },
    "videoSensing.direction": {
        "message": "ахырхарҭа",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.motion": {
        "message": "аиҭаҵра",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.off": {
        "message": "иаҿыхтәуп",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "videoSensing.on": {
        "message": "иаҿактәуп",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "videoSensing.onFlipped": {
        "message": "горизонталла анырԥшраан",
        "description": "Option for the \"turn video [STATE]\" block that causes the video to be flipped horizontally (reversed as in a mirror)"
    },
    "videoSensing.setVideoTransparency": {
        "message": "Иқәыргылатәуп авидео аҵәцара [TRANSPARENCY]",
        "description": "Controls transparency of the video preview layer"
    },
    "videoSensing.sprite": {
        "message": "анагӡаҩ",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.stage": {
        "message": "асцена",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "videoSensing.videoOn": {
        "message": "авидео [ATTRIBUTE] [SUBJECT] аҟны",
        "description": "Reporter that returns the amount of [ATTRIBUTE] for the selected [SUBJECT]"
    },
    "videoSensing.videoToggle": {
        "message": "авидео [VIDEO_STATE] аргьежьра",
        "description": "Controls display of the video preview layer"
    },
    "videoSensing.whenMotionGreaterThan": {
        "message": "авидео ахь аиҭаҵраан > [REFERENCE]",
        "description": "Event that triggers when the amount of motion is greater than [REFERENCE]"
    },
    "wedo2.getDistance": {
        "message": "ирыбжьоу",
        "description": "the value returned by the distance sensor"
    },
    "wedo2.getTiltAngle": {
        "message": "аргьежьра акәакь [TILT_DIRECTION]",
        "description": "the angle returned by the tilt sensor"
    },
    "wedo2.isTilted": {
        "message": "ирнааума [TILT_DIRECTION_ANY]?",
        "description": "whether the tilt sensor is tilted"
    },
    "wedo2.motorDirection.backward": {
        "message": "анахь",
        "description": "label for backward element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorDirection.forward": {
        "message": "абрахь",
        "description": "label for forward element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorDirection.reverse": {
        "message": "ихынҳәтәуп",
        "description": "label for reverse element in motor direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.a": {
        "message": "motor A",
        "description": "label for motor A element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.all": {
        "message": "all motors",
        "description": "label for all motors element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.b": {
        "message": "motor B",
        "description": "label for motor B element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorId.default": {
        "message": "motor",
        "description": "label for motor element in motor menu for LEGO WeDo 2 extension"
    },
    "wedo2.motorOff": {
        "message": "иаҿыхтәуп [MOTOR_ID] ",
        "description": "turn a motor off"
    },
    "wedo2.motorOn": {
        "message": "иаҿактәуп [MOTOR_ID]",
        "description": "turn a motor on indefinitely"
    },
    "wedo2.motorOnFor": {
        "message": "иаҿактәуп  [MOTOR_ID] [DURATION] сек",
        "description": "turn a motor on for some time"
    },
    "wedo2.playNoteFor": {
        "message": "анота [NOTE] ихәмартәуп [DURATION] сек",
        "description": "play a certain note for some time"
    },
    "wedo2.setLightHue": {
        "message": "иқәыргылатәуп  арлашарааԥштәы [HUE]",
        "description": "set the LED color"
    },
    "wedo2.setMotorDirection": {
        "message": "иқәыргылатәуп [MOTOR_ID] ахырхарҭа [MOTOR_DIRECTION]",
        "description": "set the motor's turn direction"
    },
    "wedo2.startMotorPower": {
        "message": "иқәыргылатәуп [MOTOR_ID] амчра [POWER]",
        "description": "set the motor's power and turn it on"
    },
    "wedo2.tiltDirection.any": {
        "message": "иарбанзаалакь аҟынтәи ",
        "description": "label for any element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.down": {
        "message": "алада",
        "description": "label for down element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.left": {
        "message": "армарахь",
        "description": "label for left element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.right": {
        "message": "арӷьарахь",
        "description": "label for right element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.tiltDirection.up": {
        "message": "аҩада",
        "description": "label for up element in tilt direction menu for LEGO WeDo 2 extension"
    },
    "wedo2.whenDistance": {
        "message": "ирыбжьоу [OP] [REFERENCE] анакәу",
        "description": "check for when distance is < or > than reference"
    },
    "wedo2.whenTilted": {
        "message": "[TILT_DIRECTION_ANY] анырнаау",
        "description": "check when tilted in a certain direction"
    }
}
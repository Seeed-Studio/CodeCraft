{
    "music.drumHandClap": {
        "message": "(8) Hand Clap",
        "description": "Sound of two hands clapping together"
    },
    "videoSensing.setVideoTransparency": {
        "message": "set video transparency to [TRANSPARENCY]",
        "description": "Controls transparency of the video preview layer"
    },
    "pen.setColor": {
        "message": "set pen color to [COLOR]",
        "description": "set the pen color to a particular (RGB) value"
    },
    "pen.setColorParam": {
        "message": "set pen [COLOR_PARAM] to [VALUE]",
        "description": "set the state for a pen color parameter e.g. saturation"
    },
    "music.drumCabasa": {
        "message": "(15) Cabasa",
        "description": "Sound of a cabasa being shaken"
    },
    "music.getTempo": {
        "message": "tempo",
        "description": "get the current tempo (speed) for notes, drums, and rests played"
    },
    "translate.categoryName": {
        "message": "Translate",
        "description": "Label for the translate extension category"
    },
    "music.drumOpenHiHat": {
        "message": "(5) Open Hi-Hat",
        "description": "Sound of a drum stick hitting a hi-hat while open"
    },
    "music.drumBongo": {
        "message": "(13) Bongo",
        "description": "Sound of a bongo being struck"
    },
    "videoSensing.stage": {
        "message": "stage",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "pen.colorMenu.brightness": {
        "message": "brightness",
        "description": "label for brightness element in color picker for pen extension"
    },
    "videoSensing.videoToggle": {
        "message": "turn video [VIDEO_STATE]",
        "description": "Controls display of the video preview layer"
    },
    "pen.setSize": {
        "message": "set pen size to [SIZE]",
        "description": "set the diameter of a trail left by a sprite"
    },
    "music.drumBass": {
        "message": "(2) Bass Drum",
        "description": "Sound of bass drum as used in a standard drum kit"
    },
    "music.instrumentCello": {
        "message": "(8) Cello",
        "description": "Sound of a cello being played with a bow"
    },
    "pen.changeHue": {
        "message": "change pen color by [HUE]",
        "description": "legacy pen blocks - change pen color"
    },
    "music.instrumentChoir": {
        "message": "(15) Choir",
        "description": "Sound of a choir singing"
    },
    "music.drumVibraslap": {
        "message": "(17) Vibraslap",
        "description": "Sound of a Vibraslap being played"
    },
    "pen.stamp": {
        "message": "stamp",
        "description": "render current costume on the background"
    },
    "music.instrumentPizzicato": {
        "message": "(7) Pizzicato",
        "description": "Sound of a string instrument (e.g. violin) being plucked"
    },
    "music.instrumentWoodenFlute": {
        "message": "(13) Wooden Flute",
        "description": "Sound of a wooden flute being played"
    },
    "music.drumSnare": {
        "message": "(1) Snare Drum",
        "description": "Sound of snare drum as used in a standard drum kit"
    },
    "translate.translateBlock": {
        "message": "translate [WORDS] to [LANGUAGE]",
        "description": "translate some text to a different language"
    },
    "music.drumCowbell": {
        "message": "(11) Cowbell",
        "description": "Sound of a cowbell being struck"
    },
    "videoSensing.onFlipped": {
        "message": "on flipped",
        "description": "Option for the \"turn video [STATE]\" block that causes the video to be flipped horizontally (reversed as in a mirror)"
    },
    "pen.categoryName": {
        "message": "Pen",
        "description": "Label for the pen extension category"
    },
    "speak.defaultTextToSpeak": {
        "message": "hello",
        "description": "hello: the default text to speak"
    },
    "videoSensing.sprite": {
        "message": "sprite",
        "description": "Subject for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "music.restForBeats": {
        "message": "rest for [BEATS] beats",
        "description": "rest (play no sound) for a number of beats"
    },
    "music.drumTriangle": {
        "message": "(12) Triangle",
        "description": "Sound of a triangle (instrument) being struck"
    },
    "music.instrumentTrombone": {
        "message": "(9) Trombone",
        "description": "Sound of a trombone being played"
    },
    "music.instrumentVibraphone": {
        "message": "(16) Vibraphone",
        "description": "Sound of a vibraphone being struck"
    },
    "music.instrumentSaxophone": {
        "message": "(11) Saxophone",
        "description": "Sound of a saxophone being played"
    },
    "music.instrumentBass": {
        "message": "(6) Bass",
        "description": "Sound of an accoustic upright bass"
    },
    "pen.clear": {
        "message": "erase all",
        "description": "erase all pen trails and stamps"
    },
    "music.instrumentClarinet": {
        "message": "(10) Clarinet",
        "description": "Sound of a clarinet being played"
    },
    "music.instrumentSteelDrum": {
        "message": "(18) Steel Drum",
        "description": "Sound of a steel drum being struck"
    },
    "translate.defaultTextToTranslate": {
        "message": "hello",
        "description": "hello: the default text to translate"
    },
    "pen.setHue": {
        "message": "set pen color to [HUE]",
        "description": "legacy pen blocks - set pen color to number"
    },
    "music.drumGuiro": {
        "message": "(16) Guiro",
        "description": "Sound of a guiro being played"
    },
    "music.instrumentBassoon": {
        "message": "(14) Bassoon",
        "description": "Sound of a bassoon being played"
    },
    "translate.viewerLanguage": {
        "message": "viewer language",
        "description": "the languge of the project viewer"
    },
    "pen.setShade": {
        "message": "set pen shade to [SHADE]",
        "description": "legacy pen blocks - set pen shade"
    },
    "music.instrumentFlute": {
        "message": "(12) Flute",
        "description": "Sound of a flute being played"
    },
    "pen.colorMenu.color": {
        "message": "color",
        "description": "label for color element in color picker for pen extension"
    },
    "music.drumConga": {
        "message": "(14) Conga",
        "description": "Sound of a conga being struck"
    },
    "pen.changeSize": {
        "message": "change pen size by [SIZE]",
        "description": "change the diameter of the trail left by a sprite"
    },
    "videoSensing.on": {
        "message": "on",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "music.instrumentSynthPad": {
        "message": "(21) Synth Pad",
        "description": "Sound of a \"pad\" synthesizer being played"
    },
    "pen.colorMenu.transparency": {
        "message": "transparency",
        "description": "label for transparency element in color picker for pen extension"
    },
    "music.instrumentGuitar": {
        "message": "(4) Guitar",
        "description": "Sound of an accoustic guitar"
    },
    "music.drumClosedHiHat": {
        "message": "(6) Closed Hi-Hat",
        "description": "Sound of a drum stick hitting a hi-hat while closed"
    },
    "pen.changeColorParam": {
        "message": "change pen [COLOR_PARAM] by [VALUE]",
        "description": "change the state of a pen color parameter"
    },
    "videoSensing.whenMotionGreaterThan": {
        "message": "when video motion > [REFERENCE]",
        "description": "Event that triggers when the amount of motion is greater than [REFERENCE]"
    },
    "speak.speakAndWaitBlock": {
        "message": "speak [WORDS]",
        "description": "speak some words"
    },
    "music.drumTambourine": {
        "message": "(7) Tambourine",
        "description": "Sound of a tambourine being struck"
    },
    "music.playDrumForBeats": {
        "message": "play drum [DRUM] for [BEATS] beats",
        "description": "play drum sample for a number of beats"
    },
    "music.instrumentMarimba": {
        "message": "(19) Marimba",
        "description": "Sound of a marimba being struck"
    },
    "music.instrumentMusicBox": {
        "message": "(17) Music Box",
        "description": "Sound of a music box playing"
    },
    "music.instrumentOrgan": {
        "message": "(3) Organ",
        "description": "Sound of an organ"
    },
    "videoSensing.videoOn": {
        "message": "video [ATTRIBUTE] on [SUBJECT]",
        "description": "Reporter that returns the amount of [ATTRIBUTE] for the selected [SUBJECT]"
    },
    "music.drumCuica": {
        "message": "(18) Cuica",
        "description": "Sound of a cuica being played"
    },
    "pen.penDown": {
        "message": "pen down",
        "description": "start leaving a trail when the sprite moves"
    },
    "videoSensing.motion": {
        "message": "motion",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "pen.penUp": {
        "message": "pen up",
        "description": "stop leaving a trail behind the sprite"
    },
    "music.changeTempo": {
        "message": "change tempo by [TEMPO]",
        "description": "change tempo (speed) for notes, drums, and rests played"
    },
    "pen.colorMenu.saturation": {
        "message": "saturation",
        "description": "label for saturation element in color picker for pen extension"
    },
    "music.setInstrument": {
        "message": "set instrument to [INSTRUMENT]",
        "description": "set the instrument (e.g. piano, guitar, trombone) for notes played"
    },
    "music.instrumentPiano": {
        "message": "(1) Piano",
        "description": "Sound of a piano"
    },
    "music.drumWoodBlock": {
        "message": "(10) Wood Block",
        "description": "Sound of a wood block being struck"
    },
    "videoSensing.direction": {
        "message": "direction",
        "description": "Attribute for the \"video [ATTRIBUTE] on [SUBJECT]\" block"
    },
    "music.instrumentSynthLead": {
        "message": "(20) Synth Lead",
        "description": "Sound of a \"lead\" synthesizer being played"
    },
    "music.drumSideStick": {
        "message": "(3) Side Stick",
        "description": "Sound of a drum stick hitting the side of a drum (usually the snare)"
    },
    "pen.changeShade": {
        "message": "change pen shade by [SHADE]",
        "description": "legacy pen blocks - change pen shade"
    },
    "music.setTempo": {
        "message": "set tempo to [TEMPO]",
        "description": "set tempo (speed) for notes, drums, and rests played"
    },
    "music.instrumentElectricPiano": {
        "message": "(2) Electric Piano",
        "description": "Sound of an electric piano"
    },
    "videoSensing.categoryName": {
        "message": "Video Motion",
        "description": "Label for the video motion extension category"
    },
    "music.instrumentElectricGuitar": {
        "message": "(5) Electric Guitar",
        "description": "Sound of an electric guitar"
    },
    "music.drumCrashCymbal": {
        "message": "(4) Crash Cymbal",
        "description": "Sound of a drum stick hitting a crash cymbal"
    },
    "videoSensing.off": {
        "message": "off",
        "description": "Option for the \"turn video [STATE]\" block"
    },
    "music.playNoteForBeats": {
        "message": "play note [NOTE] for [BEATS] beats",
        "description": "play a note for a number of beats"
    },
    "music.categoryName": {
        "message": "Music",
        "description": "Label for the Music extension category"
    },
    "music.drumClaves": {
        "message": "(9) Claves",
        "description": "Sound of claves being struck together"
    },
    "teachableMachine.categoryName": {
        "message": "Teachable Machine",
        "description": "Teachable Machine"
    },
    "teachableMachine.trainMode": {
        "message": "Training model",
        "description": "Training model"
    },
    "teachableMachine.openRecognizeModal": {
        "message": "Open recognition window",
        "description": "Open recognition window"
    },
    "teachableMachine.getRecognitionResult": {
        "message": "Recognition result",
        "description": "Recognition result"
    },
    "teachableMachine.getConfidenceValue": {
        "message": "Confidence of [CATEGORY_PARAM]",
        "description": "getConfidenceValue"
    },
    "teachableMachine.whichLabel": {
        "message": "Recognition result is [CATEGORY_PARAM] ?",
        "description": "识别结果为"
    },
    "cognitiveServices.categoryName": {
        "message": "Cognitive Services",
        "description": "Cognitive Services"
    },
    "cognitiveServices.openRecognizeModal": {
        "message": "Open recognition window",
        "description": "Open recognition window"
    },
    "cognitiveServices.getSpeechRecognitionResult": {
        "message": "Speech recognition result",
        "description": "Speech recognition result"
    },
    "cognitiveServices.getFaceFeaturesPosition": {
        "message": "[Position] position of [FaceFeatures]",
        "description": "getFaceFeaturesPosition"
    },
    "cognitiveServices.getAgeRecognitionResult": {
        "message": "Age recognition result",
        "description": "Age recognition result"
    },
    "cognitiveServices.getEmotionRecognitionResult": {
        "message": "Emotion recognition result is [Emotion] ?",
        "description": "getEmotionRecognitionResult"
    },
    "cognitiveServices.nose": {
        "message": "nose",
        "description": "nose"
    },
    "cognitiveServices.leftEye": {
        "message": "left eye",
        "description": "left eye"
    },
    "cognitiveServices.rightEye": {
        "message": "right eye",
        "description": "right eye"
    },
    "cognitiveServices.happy": {
        "message": "happy",
        "description": "happy"
    },
    "cognitiveServices.neutral": {
        "message": "neutral",
        "description": "neutral"
    },
    "cognitiveServices.surprised": {
        "message": "surprised",
        "description": "surprised"
    },
    "cognitiveServices.sad": {
        "message": "sad",
        "description": "sad"
    },
    "cognitiveServices.angry": {
        "message": "angry",
        "description": "angry"
    },
    "cognitiveServices.disgusted": {
        "message": "disgusted",
        "description": "disgusted"
    },
    "cognitiveServices.fearful": {
        "message": "fearful",
        "description": "fearful"
    },
    "threeAxisAccelerometer.categoryName": {
        "message": "Accelerometer",
        "description": "Accelerometer"
    },
    "threeAxisAccelerometer.openAxisModal": {
        "message": "Open 3-Axis Accelerometer Window",
        "description": "Open 3-Axis Accelerometer Window"
    },
    "threeAxisAccelerometer.showThreeAxisAccelerometer": {
        "message": "Accelerometer axis X [X] Y [Y] Z [Z]",
        "description": "Accelerometer axis"
    },
    "meteostation.categoryName": {
        "message": "Meteostation",
        "description": "Meteostation"
    },
    "meteostation.openMeteostationModal": {
        "message": "Open meteostation window",
        "description": "Open meteostation window"
    },
    "meteostation.showMeteostation": {
        "message": "Meteostation Temperature [TEMP] Humidity [HUM] Air Pressure [PRE]",
        "description": "Meteostation Temperature Humidity Air Pressure"
    },
    "modelExtension.categoryName": {
        "message": "Custom Models",
        "description": ""
    },
    "modelExtension.imgModelButton": {
        "message": "Image Classification Model",
        "description": ""
    },
    "modelExtension.objModelButton": {
        "message": "Object Detection Model",
        "description": ""
    },
    "modelExtension.deviceTrainButton": {
        "message": "On-device training",
        "description": ""
    },
    "createSkill.categoryName": {
        "message": "Create Skill",
        "description": "Create Skill"
    },
    "createSkill.showCreateSkillName": {
        "message": "Skill ",
        "description": "Skill "
    },
    "createSkill.showCreateSkillTimes": {
        "message": "[TIMES] times",
        "description": "[TIMES] times"
    },
    "calibrateServos.categoryName": {
        "message": "Calibrate Servos",
        "description": "Calibrate Servos"
    },
    "calibrateServos.RestoreFactorySettings": {
        "message": "Flash factory code",
        "description": "Flash factory code"
    },
    "calibrateServos.updatePreloadedSkills": {
        "message": "Update Preloaded Skills",
        "description": "Update Preloaded Skills"
    },
    "modelExtension.block.imageReporter":{
        "message": "recognized # result probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.imageBoolean":{
        "message": "recognized # is [RESULT] probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.objectReporter":{
        "message": "detected # result probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.objectReporterWithCoordinate":{
        "message": "detected #  [RESULT] [XY] coordinate probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.objectBoolean":{
        "message": "detected # is [RESULT] probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.trainRecordSeedSample":{
        "message": "record # seed sample for [RESULT]",
        "description": ""
    },
    "modelExtension.block.trainRecordSample":{
        "message": "record a # sample",
        "description": ""
    },
    "modelExtension.block.trainRecognized":{
        "message": "recognized # is [RESULT] probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.trainRecognizedResult":{
        "message": "recognized # result probability > [PROBABILITY] %",
        "description": ""
    },
    "modelExtension.block.trainModelSave":{
        "message": "save # model as [NAME]",
        "description": ""
    },
    "modelExtension.block.trainModelLoad":{
        "message": "load # model from [NAME]",
        "description": ""
    },

    "shieldBot.categoryName": {
        "message": "Shield Bot",
        "description": "Shield Bot"
    },
    "shieldBot.bot1": {
        "message": "Shield Bot Motors go [DIRECT] at [SPEED] speed",
        "description": "bot1"
    },
    "shieldBot.bot2": {
        "message": "Shield Bot Motors position [POSITION]",
        "description": "bot2"
    },
    "shieldBot.bot1.opt1": {
        "message": "Forward",
        "description": ""
    },
    "shieldBot.bot1.opt2": {
        "message": "Backward",
        "description": ""
    },
    "shieldBot.bot1.opt3": {
        "message": "Left",
        "description": ""
    },
    "shieldBot.bot1.opt4": {
        "message": "Right",
        "description": ""
    },
    "shieldBot.bot1.opt5": {
        "message": "Stop",
        "description": ""
    },
    "shieldBot.bot1.opt6": {
        "message": "Slow",
        "description": ""
    },
    "shieldBot.bot1.opt7": {
        "message": "Medium",
        "description": ""
    },
    "shieldBot.bot1.opt8": {
        "message": "Fast",
        "description": ""
    },
    "shieldBot.bot2.opt1": {
        "message": "Middle",
        "description": ""
    },
    "shieldBot.bot2.opt2": {
        "message": "Left",
        "description": ""
    },
    "shieldBot.bot2.opt3": {
        "message": "Edge Left",
        "description": ""
    },
    "shieldBot.bot2.opt4": {
        "message": "Right",
        "description": ""
    },
    "shieldBot.bot2.opt5": {
        "message": "Edge Right",
        "description": ""
    },
    "shieldBot.bot2.opt6": {
        "message": "Lost",
        "description": ""
    },
    "ottoDiyRobot.categoryName": {
        "message": "Biped Robot",
        "description": "Biped Robot"
    },
    "ottoDiyRobot.robot1": {
        "message": "Otto DIY Robot [DIRECT] Steps:[STEPS] Time:[TIMES]",
        "description": "robot1"
    },
    "ottoDiyRobot.robot2": {
        "message": "Otto DIY Robot [ACTION] Steps:[STEPS] Time:[TIMES] Direction:[DIRECTS]",
        "description": "robot2"
    },
    "ottoDiyRobot.robot1.opt0": {
        "message": "forward",
        "description": ""
    },
    "ottoDiyRobot.robot1.opt1": {
        "message": "back",
        "description": ""
    },
    "ottoDiyRobot.robot1.opt2": {
        "message": "left",
        "description": ""
    },
    "ottoDiyRobot.robot1.opt3": {
        "message": "right",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt0": {
        "message": "Rest",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt1": {
        "message": "Jump",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt2": {
        "message": "Bend",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt3": {
        "message": "ShakeLeg",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt4": {
        "message": "UpDown",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt5": {
        "message": "Swing",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt6": {
        "message": "TipToeSwing",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt7": {
        "message": "Jitter",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt8": {
        "message": "AscendingTurn",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt9": {
        "message": "Moonwalker",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt10": {
        "message": "Crusaito",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt11": {
        "message": "Flapping",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt12": {
        "message": "RIGHT/FOREWARD",
        "description": ""
    },
    "ottoDiyRobot.robot2.opt13": {
        "message": "LEFT/BACKWARD",
        "description": ""
    },
    "mark.categoryName": {
        "message": "M.A.R.K",
        "description": "M.A.R.K"
    },
    "mark.run": {
        "message": "M.A.R.K go [DIRECT] at [SPEED] speed",
        "description": "run"
    },
    "mark.motorrun": {
        "message": "M.A.R.K run motor [MOTOR] at [SPEED]",
        "description": "motorrun"
    },
    "mark.servorun": {
        "message": "M.A.R.K Servo [MOTOR] move to [SPEED] degree",
        "description": "servorun"
    },
    "mark.detection.property.x": {
        "message": "X-center",
        "description": ""
    },
    "mark.detection.property.y": {
        "message": "Y-center",
        "description": ""
    },
    "mark.detection.property.a": {
        "message": "Area",
        "description": ""
    },
    "wireless.categoryName": {
        "message": "Wireless Communication",
        "description": "Wisdom City"
    },
    "wireless.webserverInit": {
        "message": "Web Server Initialize Wisdom city SSID [SSID] PWD [PWD]",
        "description": "webserverInit"
    },
    "wireless.webserverShow": {
        "message": "Web Server Location [NUMBER] [SENSOR] Display text: [NAME] Value: [VALUE]",
        "description": "webserverShow"
    },
    "wireless.lotusvsetble": {
        "message": "CSR-BC417 Bluetooth pin [PIN1] ID [ID] PWD [PWD]",
        "description": "lotusvsetble"
    },
    "wireless.lotusvgetblevalue": {
        "message": "CSR-BC417 Bluetooth pin [PIN1] readString",
        "description": "lotusvgetblevalue"
    },
    "wireless.infraredSend": {
        "message": "Infrared Emitter pin (D3) send [MESSAGE]",
        "description": "infraredSend"
    },
    "wireless.infraredReceive": {
        "message": "Infrared Receiver pin [PIN2] received value",
        "description": "infraredReceive"
    },
    "wireless.webserverShow.opt1": {
        "message": "Water",
        "description": ""
    },
    "wireless.webserverShow.opt2": {
        "message": "Ultrasonic Ranger",
        "description": ""
    },
    "wireless.webserverShow.opt3": {
        "message": "PIR Motion",
        "description": ""
    },
    "wireless.webserverShow.opt4": {
        "message": "Temperature&Humidity",
        "description": ""
    },
    "wireless.webserverShow.opt5": {
        "message": "LED",
        "description": ""
    },
    "wireless.webserverShow.opt6": {
        "message": "Vibration",
        "description": ""
    },
    "wireless.webserverShow.opt7": {
        "message": "Voltage",
        "description": ""
    },
    "wireless.webserverShow.opt8": {
        "message": "Air",
        "description": ""
    },
    "wireless.webserverShow.opt9": {
        "message": "Flame",
        "description": ""
    },
    "wireless.webserverShow.opt10": {
        "message": "Vision Sensor",
        "description": ""
    }
    

}


